"""
Django settings for studentreg project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config
import boto3
from botocore.exceptions import ClientError
import json

def get_secret():
    secret_name = "prod/App/env"
    region_name = "us-east-1"

    # Create a Secrets Manager client
    session = boto3.session.Session()
    client = session.client(
        service_name='secretsmanager',
        region_name=region_name
    )

    try:
        get_secret_value_response = client.get_secret_value(
            SecretId=secret_name
        )
    except ClientError as e:
        raise e

    # Parse the secret string (usually JSON)
    secret = get_secret_value_response['SecretString']
    
    # ถ้า secret เป็น JSON
    try:
        secret_dict = json.loads(secret)
        return secret_dict
    except json.JSONDecodeError:
        # ถ้าไม่ใช่ JSON ให้ return string
        return secret

secret = get_secret()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-=c$f+=2o!!ctf+z1@tf6z!&62_1s^u!ur)nd$o+x%kxut_wiqb'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = [config('ALB_DNS_NAME'), 'localhost']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'core',
    'enrollments',
    'accounts',
    'courses',
    'departments',
    'personnels',

    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'studentreg.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

TAILWIND_APP_NAME = 'theme'

WSGI_APPLICATION = 'studentreg.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': secret.get('DB_NAME'),
        'USER': secret.get('DB_USER'),
        'PASSWORD': secret.get('DB_PASSWORD'),
        'HOST': secret.get('DB_HOST'),
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'accounts.CustomUser'

LOGIN_URL = '/authen/login'


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

NPM_BIN_PATH = 'npm.cmd'

if DEBUG:
    INSTALLED_APPS += ['django_browser_reload']

# Root
STATIC_ROOT = BASE_DIR / "static"
# MEDIA_ROOT = BASE_DIR / 'media'

# AWS S3 setting
INSTALLED_APPS += ['storages']

# Use this code snippet in your app.
# If you need more information about configurations
# or implementing the sample code, visit the AWS docs:
# https://aws.amazon.com/developer/language/python/

AWS_ACCESS_KEY_ID = secret.get('ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = secret.get('SECRET_ACCESS_KEY')
AWS_SESSION_TOKEN = secret.get('SESSION_TOKEN')
AWS_STORAGE_BUCKET_NAME = secret.get('STORAGE_BUCKET_NAME')
AWS_S3_REGION_NAME = secret.get('S3_REGION_NAME')
AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"


# Static files
# STATICFILES_STORAGE = "studentreg.storage_backends.StaticStorage"
# DEFAULT_FILE_STORAGE = "studentreg.storage_backends.MediaStorage"
STORAGES = {
    "default": {
        "BACKEND": "studentreg.storage_backends.MediaStorage",
    },
    "staticfiles": {
        "BACKEND": "studentreg.storage_backends.StaticStorage",
    },
}
# URL -> S3
STATIC_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/static/"
MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/media/"

AWS_DEFAULT_ACL = None
AWS_QUERYSTRING_AUTH = False

# Cognito
COGNITO_USER_POOL_ID = secret.get('USER_POOL_ID')
COGNITO_APP_CLIENT_ID = secret.get('APP_CLIENT_ID')
COGNITO_REGION = secret.get('REGION')
COGNITO_APP_CLIENT_SECRET = secret.get('APP_CLIENT_SECRET')
